import sys
import io
import time
import requests
import math
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import yfinance as yf

#plt.style.use('fivethirtyeight')
plt.style.use('classic')

def GrabCompaniesFromYahoo():
    start = datetime(2020,1,1)
    end = datetime(2020,12,31)

    y_url="https://pkgstore.datahub.io/core/nasdaq-listings/nasdaq-listed_csv/data/7665719fb51081ba0bd834fde71ce822/nasdaq-listed_csv.csv"
    s = requests.get(y_url).content
    companies = pd.read_csv(io.StringIO(s.decode('utf-8')))
    return companies


def GrabPricesFromYahoo(ticker, days):
    prices = []
    #_start = datetime(2020,1,1)
    #_end = datetime(2020,12,31)
    _end = datetime.today()
    _start = _end + timedelta(days = days * -1)
    _prices = yf.download(ticker,start=_start, end=_end, progress=False)
    return _prices


# Create simple moving average 30 day window
def CreateSMA30(Stocks):
    SMA30 = pd.DataFrame()
    SMA30['Close'] = Stocks['Close'].rolling(window = 30).mean()
    return SMA30

# Create a simple moving average for 100 days
def CreateSMA100(Stocks):
    SMA100 = pd.DataFrame()
    SMA100['Close'] = Stocks['Close'].rolling(window=100).mean()
    return SMA100

# Create a new data frame to store all our data
def MergeIndicators(Stocks, SMA30, SMA100):
    data = pd.DataFrame()
    data['Close'] = Stocks['Close']
    data['SMA30'] = SMA30['Close']
    data['SMA100'] = SMA100['Close']

    return data

# Function to show BUY and SELL indicator on the stock prices graph
# TODO: Optimize this function
def BuySell(data):
    sigPriceBuy = []
    sigPriceSell = []
    flag = -1
    #for i in range(data.shape[0]-DateRange, data.shape[0]):
    for i in range(data.shape[0]):
        if data['SMA30'][i] > data['SMA100'][i]:
            if flag != 1:
                sigPriceBuy.append(data['Close'][i])
                sigPriceSell.append(np.nan)
                flag = 1
            else:
                sigPriceBuy.append(np.nan)
                sigPriceSell.append(np.nan)

        elif data['SMA30'][i] <= data['SMA100'][i]:
                if flag != 0:
                    sigPriceBuy.append(np.nan)
                    sigPriceSell.append(data['Close'][i])
                    flag = 0
                else:
                    sigPriceBuy.append(np.nan)
                    sigPriceSell.append(np.nan)
        else:
            sigPriceBuy.append(np.nan)
            sigPriceSell.append(np.nan)

    return (sigPriceBuy, sigPriceSell)

def view_data(df_data, StockTicker):
    plt.figure(figsize=(15,6))
    plt.plot(df_data['Close'], label=StockTicker, alpha = 0.5, color='black')
    plt.plot(df_data['SMA30'], label='SMA30', alpha = 0.35)
    plt.plot(df_data['SMA100'], label='SMA100', alpha = 0.35)
    plt.scatter(df_data.index, df_data['BuyFlag'], label='Buy', marker='^', color='green')
    plt.scatter(df_data.index, df_data['SellFlag'], label='Sell', marker='v', color='red')
    plt.title('Dual Margin Cross Over Indicators SMA30 vs SMA100')
    plt.xlabel('Last ' + str(df_data.shape[0]) + ' Days')
    plt.ylabel('Close price (USD$)')
    plt.legend(loc='upper left')
    plt.show()

def show_dmaco(stocks, ticker):
    SMA30 = CreateSMA30(stocks)
    SMA100 = CreateSMA100(stocks)
    df_data = MergeIndicators(stocks, SMA30, SMA100)
    buy_sell = BuySell(df_data)
    df_data['BuyFlag'] = buy_sell[0]
    df_data['SellFlag'] = buy_sell[1]
    #data = df_data.iloc[df_data.shape[0]-num_days:df_data.shape[0]]
    view_data(df_data, ticker)


def plot_prices(df_data, StockTicker):
    plt.figure(figsize=(15,6))
    #plt.plot(df_data['Price'], label=StockTicker, alpha = 0.5, color='black')
    #plt.plot(df_data.index, label=StockTicker, alpha = 0.5, color='black')
    plt.plot(df_data['Close'], label='Close', alpha = 0.35)
    plt.title('--- Stock prices ---')
    plt.ylabel('Close price (USD$)')
    plt.legend(loc='upper left')
    plt.show()

def show_menu():
    print(f"\nDual Margin Average Cross Over Indicators - SMA30 vs SMA100, v.0.1, feb 2021")
    print(f"Historical pricing from Yahho Finance\n")
    print(f"Usage: 'py dmaco.py --option [<ticker> <days>]'")
    print(f"     --yahoo                    : Get list of all companies on yahoo finance")
    print(f"     --info <ticker>            : Get company info for ticker (data from yahoo finance)")
    print(f"     --history <ticker> <days>  : Get historical stock prices, days = 1000 by default (data from yahoo finance)")
    print(f"  [optional values]:") 
    print(f"     <ticker> : Stock ticker of file to load")
    print(f"     <days>   : Number of days to show from latest stock price value (default = 1000 days)")
    
    print(f"\n")


def execute_command():
    if sys.argv[1] == '--yahoo':
        if (len(sys.argv) > 2):
            ticker = sys.argv[2]
            companies = GrabCompaniesFromYahoo()
            print(companies)
        else:
            print(GrabCompaniesFromYahoo())

    if sys.argv[1] == '--info':
        if (len(sys.argv) > 2):
            ticker = sys.argv[2]
            companies = GrabCompaniesFromYahoo()
            info = companies[companies['Symbol'] == ticker]
            print(info)
    if sys.argv[1] == '--historical':
        if (len(sys.argv) > 2):
            ticker = sys.argv[2]
            days = 1000
            if (len(sys.argv) > 3):
                days = int(sys.argv[3])
            prices = GrabPricesFromYahoo(ticker, days)
            
            print(prices)
            show_dmaco(prices, ticker)
            #plot_prices(prices, ticker)
#
# Show menu if executed from command line
if __name__ == '__main__':
    if len(sys.argv) > 1:
        execute_command()
    else:
        show_menu()
        print(f"{datetime.today()}")

